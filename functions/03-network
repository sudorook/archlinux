#!/bin/bash

# SPDX-FileCopyrightText: 2016 - 2024 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

DIR="$(dirname "$0")"

function install_network {
  local networking="${DIR}/packages/network.list"
  local nmconf="/etc/NetworkManager/NetworkManager.conf"
  local nmrandomconf="/etc/NetworkManager/conf.d/randomize_mac_address.conf"

  show_header "Setting up networking."
  check_installed "${networking}"
  show_success "Networking applications installed."

  show_info "Setting up MAC address randomization in Network Manager."
  if ! find "${nmconf}" /etc/NetworkManager/conf.d/ -type f -exec grep -q "mac-address=random" {} +; then
    sudo tee -a "${nmrandomconf}" > /dev/null << EOF
[connection-mac-randomization]
wifi.cloned-mac-address=random
ethernet.cloned-mac-address=random
EOF
  fi

  show_info "Enabling NetworkManager service."
  sudo systemctl enable --now NetworkManager

  show_info "Disabling SSH root login and forcing SSH v2."
  sudo sed -i \
    -e "/^#PermitRootLogin prohibit-password$/a PermitRootLogin no" \
    -e "/^#Port 22$/i Protocol 2" \
    /etc/ssh/sshd_config
}

function install_discovery {
  local discovery="${DIR}/packages/discover.list"
  local nsconf="/etc/nsswitch.conf"

  show_header "Setting up local network discovery."
  check_installed "${discovery}"
  show_success "Discovery applications installed."

  show_info "Enabling local hostname resolution in Avahi."
  if [ -f "${nsconf}" ]; then
    if ! grep -q "^hosts: .*mdns_minimal" "${nsconf}"; then
      sudo sed -i "/^hosts:/{s/myhostname/myhostname mdns_minimal \[NOTFOUND=return\]/g}" ${nsconf}
    else
      show_info "Local hostname resolution already set."
    fi
  else
    show_warning "${nsconf@Q} missing. Skipping."
    return
  fi
  sudo systemctl enable avahi-daemon.service
  sudo systemctl start avahi-daemon.service
}

function install_firewall {
  local firewall="${DIR}/packages/firewall.list"

  show_header "Setting up firewall."
  check_installed "${firewall}"
  show_success "Firewall packages installed."

  show_info "Setting ufw firewall rules."
  sudo ufw default deny

  if pacman -Qi syncthing > /dev/null 2>&1; then
    sudo ufw allow syncthing
    sudo ufw allow syncthing-gui
  fi

  if pacman -Qi kdeconnect > /dev/null 2>&1; then
    sudo ufw allow 'KDE Connect'
  fi

  if pacman -Qi transmission-cli > /dev/null 2>&1; then
    sudo ufw allow Transmission
  elif pacman -Qi transmission-qt > /dev/null 2>&1; then
    sudo ufw allow Transmission
  elif pacman -Qi transmission-gtk > /dev/null 2>&1; then
    sudo ufw allow Transmission
  fi

  show_info "Enabling ufw."
  sudo ufw enable
  sudo systemctl enable ufw
}

function install_tor {
  local tor="${DIR}/packages/tor.list"

  show_header "Installing Tor programs."
  check_installed "${tor}"
  show_success "Tor installed."

  show_info "Enabling and starting Tor service."
  sudo systemctl enable tor
  sudo systemctl start tor
}

function tunnel_pacman_tor {
  # local pacmanconf="/etc/pacman.conf"
  show_header "Tunneling pacman through Tor."
  # if ! pacman -Qi tor > /dev/null 2>&1; then
  #   show_warning "Tor not installed. Skipping."
  # elif ! [[ $(systemctl is-active tor) == "active" ]]; then
  #   show_warning "Tor systemd unit is not active. Skipping."
  # else
  #   sudo cp ${pacmanconf} ${pacmanconf}.${RANDOM}.bak
  #   sudo sed -i "s,^#XferCommand = /usr/bin/curl .*,XferCommand = /usr/bin/curl --socks5-hostname localhost:9050 --location --continue-at - --fail --output %o %u "${pacmanconf}"
  #   sudo pacman -Syy
  #   show_success "Done."
  # fi
  show_warning "Disabled. Pacman will time-out, causing upgrades to fail."
}

function 03-network {
  show_question "Network: what do you want to install?"
  show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"

  local options=(
    "Back"
    "All"
    "Networking"
    "Local discovery"
    "Firewall"
    "Install Tor"
    "Tunnel pacman over Tor")
  local option
  select option in "${options[@]}"; do
    case "${option}" in
      "Back")
        break
        ;;
      "All")
        install_network
        install_discovery
        install_firewall
        install_tor
        tunnel_pacman_tor
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Networking")
        install_network
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Local discovery")
        install_discovery
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Firewall")
        install_firewall
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Install Tor")
        install_tor
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Tunnel pacman over Tor")
        tunnel_pacman_tor
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      *)
        show_warning "Invalid option."
        ;;
    esac
  done
}
