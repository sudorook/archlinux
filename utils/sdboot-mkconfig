#!/bin/bash
set -eu

# Arch Linux (post-)install scripts
# Copyright (C) 2020
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


if ! [ "$#" -eq 1 ]; then
  exit 2
fi

function get_cmdline {
  local default
  local cmdline
  if [ "$#" -eq 0 ] || [[ "${1}" = "default" ]]; then
    if [ -f "${EFIDIR}/loader/loader.conf" ]; then
      default=$(sed -n "s/^default\s\+\(.*\)/\1/p" "${EFIDIR}/loader/loader.conf")
    fi
  elif [ "$#" -eq 1 ]; then
    default=$(basename "${1}")
  fi

  if [ -f "${EFIDIR}/loader/entries/${default}" ]; then
    cmdline=$(sed -n "s/^options\s\+\(.*\)/\1/p" "${EFIDIR}/loader/entries/${default}")
  fi

  if [[ -z "${cmdline}" ]]; then
    exit 4
  fi

  echo "${cmdline}"
}

function copy_images {
  cp -af \
    "/boot/vmlinuz-${KERNEL}" \
    "/boot/initramfs-${KERNEL}.img" \
    "/boot/initramfs-${KERNEL}-fallback.img" \
    "${EFIDIR}"
}

function make_entries {
  local outfile
  local fallback
  outfile="${KERNEL}.conf"
  fallback="${KERNEL}-fallback.conf"

  if [ -f "${EFIDIR}/initramfs-${KERNEL}.img" ]; then
    cat > "${EFIDIR}/loader/entries/${outfile}" << EOF
title	Arch Linux, ${KERNEL}
linux	/vmlinuz-${KERNEL}
initrd	/initramfs-${KERNEL}.img
options	${CMDLINE}
EOF
  fi

  if [ -f "${EFIDIR}/initramfs-${KERNEL}-fallback.img" ]; then
    cat > "${EFIDIR}/loader/entries/${fallback}" << EOF
title	Arch Linux, ${KERNEL} (fallback)
linux	/vmlinuz-${KERNEL}
initrd	/initramfs-${KERNEL}-fallback.img
options	${CMDLINE}
EOF
  fi
}

function print_entries {
  local outfile
  local fallback
  outfile="${KERNEL}.conf"
  fallback="${KERNEL}-fallback.conf"

  cat << EOF
title	Arch Linux, ${KERNEL}
linux	/vmlinuz-${KERNEL}
initrd	/initramfs-${KERNEL}.img
options	${CMDLINE}
EOF

  cat << EOF
title	Arch Linux, ${KERNEL} (fallback)
linux	/vmlinuz-${KERNEL}
initrd	/initramfs-${KERNEL}-fallback.img
options	${CMDLINE}
EOF
}

function update_ucode {
  vendor="$(lscpu | sed -n "s,^Vendor ID: \+\([A-Za-z]\+\),\1,p")"
  if [[ "${vendor}" =~ "AMD" ]]; then
    if [ -f "${EFIDIR}/amd-ucode.img" ]; then
      if ! grep "^initrd\s\+\/amd-ucode.img" \
        "${EFIDIR}/loader/entries/${KERNEL}.conf" >/dev/null 2>&1; then
        sed -i "/^linux	\/vmlinuz/a initrd	\/amd-ucode.img" \
          "${EFIDIR}/loader/entries/${KERNEL}.conf"
      fi
      if ! grep "^initrd\s\+\/amd-ucode.img" \
        "${EFIDIR}/loader/entries/${KERNEL}-fallback.conf" >/dev/null 2>&1; then
        sed -i "/^linux	\/vmlinuz/a initrd	\/amd-ucode.img" \
          "${EFIDIR}/loader/entries/${KERNEL}-fallback.conf"
      fi
    else
      sed -i "/^initrd\s\+\/amd-ucode.img/d" \
        "${EFIDIR}/loader/entries/${KERNEL}.conf" \
        "${EFIDIR}/loader/entries/${KERNEL}-fallback.conf"
    fi
  elif [[ "${vendor}" =~ "Intel" ]]; then
    if [ -f "${EFIDIR}/intel-ucode.img" ]; then
      if ! grep "^initrd\s\+\/intel-ucode.img" \
        "${EFIDIR}/loader/entries/${KERNEL}.conf" >/dev/null 2>&1; then
        sed -i "/^linux	\/vmlinuz/a initrd	\/intel-ucode.img" \
          "${EFIDIR}/loader/entries/${KERNEL}.conf"
      fi
      if ! grep "^initrd\s\+\/intel-ucode.img" \
        "${EFIDIR}/loader/entries/${KERNEL}-fallback.conf" >/dev/null 2>&1; then
        sed -i "/^linux	\/vmlinuz/a initrd	\/intel-ucode.img" \
          "${EFIDIR}/loader/entries/${KERNEL}-fallback.conf"
      fi
    else
      sed -i "/^initrd\s\+\/intel-ucode.img/d" \
        "${EFIDIR}/loader/entries/${KERNEL}.conf" \
        "${EFIDIR}/loader/entries/${KERNEL}-fallback.conf"
    fi
  fi
}

MODE="${1}"
EFIDIR="$(bootctl -p)"

case "${MODE}" in
  all|init)
    CMDLINE="$(get_cmdline)"
    for VMLINUZ in /boot/vmlinuz-*; do
      TMP="$(basename "${VMLINUZ}")"
      KERNEL="${TMP/vmlinuz-/}"
      copy_images
      make_entries
      update_ucode
    done
    ;;
  update)
    for ENTRY in "${EFIDIR}"/loader/entries/*.conf; do
      if ! [[ "${ENTRY}" =~ fallback ]]; then
        TMP="$(basename "${ENTRY}")"
        CMDLINE="$(get_cmdline "${ENTRY}")"
        get_cmdline "${ENTRY}"
        KERNEL="${TMP/\.conf/}"
        # print_entries
        make_entries
        update_ucode
      fi
    done
    ;;
  ucode)
    for ENTRY in "${EFIDIR}"/loader/entries/*.conf; do
      if ! [[ "${ENTRY}" =~ fallback ]]; then
        TMP="$(basename "${ENTRY}")"
        KERNEL="${TMP/\.conf/}"
        update_ucode
      fi
    done
    ;;
  *)
    if [[ "${1}" =~ ^linux ]]; then
      KERNEL="${1}"
      CMDLINE="$(get_cmdline)"
      # print_entries
      copy_images
      make_entries
      update_ucode
    else
      exit 3
    fi
    ;;
esac
