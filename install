#! /bin/bash
set -euo pipefail

# Arch Linux (post-)install scripts
# Copyright (C) 2020
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

DIR="$(dirname "$0")"

#
# Fancy color output
#

show_error() {
  echo -e $'\033[1;31m'"$*"$'\033[0m' 1>&2
}
show_info() {
  echo -e $'\033[1;32m'"$*"$'\033[0m'
}
show_warning() {
  echo -e $'\033[1;33m'"$*"$'\033[0m'
}
show_question() {
  echo -e $'\033[1;34m'"$*"$'\033[0m'
}
ask_question() {
  local var
  read -r -p $'\033[1;34m'"$* "$'\033[0m' var
  echo "${var}"
}
show_success() {
  echo -e $'\033[1;35m'"$*"$'\033[0m'
}
show_header() {
  echo -e $'\033[1;36m'"$*"$'\033[0m'
}
show_listitem() {
  echo -e $'\033[1;37m'"$*"$'\033[0m'
}

export -f show_error
export -f show_info
export -f show_warning
export -f show_question
export -f ask_question
export -f show_success
export -f show_header
export -f show_listitem

#
# Source the functions
#

. "${DIR}"/functions/00-check
. "${DIR}"/functions/00-install

#
# Define main select wrapper
#

function main {
  ask_device
  ask_partition_scheme
  ask_bootmode
  ask_partition_sizes

  ask_timezone
  ask_locale
  ask_hostname
  ask_username
  ask_password
  if [[ "${SCHEME}" = "LVM on LUKS" ]]; then
    ask_lukspass
  fi

  set_partitions
  format_partitions

  mount_install
  pacstrap /mnt base
  genfstab -U /mnt >> /mnt/etc/fstab
  TIMEZONE="${TIMEZONE}" arch-chroot /mnt /bin/bash -c "set_timezone"
  LOCALE="${LOCALE}" CHARSET="${CHARSET}" \
    arch-chroot /mnt /bin/bash -c "set_locale"

  arch-chroot /mnt /bin/bash -c "update_mirrorlist"
  arch-chroot /mnt /bin/bash -c "install_packages"
  arch-chroot /mnt /bin/bash -c "install_ucode"
  HOST_NAME="${HOST_NAME}" arch-chroot /mnt /bin/bash -c "set_hostname"
  USER_NAME="${USER_NAME}" USER_PASSWORD="${USER_PASSWORD}" arch-chroot /mnt /bin/bash -c "add_user"
  arch-chroot /mnt /bin/bash -c "disable_root"
  arch-chroot /mnt /bin/bash -c "set_mkinitcpio"
  if [[ "${BOOTMODE}" = "GRUB" ]]; then
    SCHEME="${SCHEME}" DEVICE="${DEVICE}" \
      arch-chroot /mnt /bin/bash -c "install_grub"
    if [[ "${SCHEME}" = "LVM on LUKS" ]]; then
      CRYPT_PASSWORD="${CRYPT_PASSWORD}" CRYPT_PARTITION="${CRYPT_PARTITION}" \
        arch-chroot /mnt /bin/bash -c "make_luks_key"
    fi
  elif [[ "${BOOTMODE}" = "systemd-boot" ]]; then
    mkdir -p /mnt/etc/pacman.d/hooks/
    cp -f \
      "${DIR}/hooks/999-add-linux.hook" \
      "${DIR}/hooks/999-remove-linux.hook" \
      "${DIR}/hooks/999-update-linux.hook" \
      "${DIR}/hooks/999-update-systemd-boot.hook" \
      /mnt/etc/pacman.d/hooks/
    local vendor
    vendor="$(lscpu | sed -n "s,^Vendor ID: \+\([A-Za-z]\+\),\1,p")"
    if [[ "${vendor}" =~ "AMD" ]]; then
      cp -f \
        "${DIR}/hooks/999-add-amd-ucode.hook" \
        "${DIR}/hooks/999-update-amd-ucode.hook" \
        "${DIR}/hooks/999-remove-amd-ucode.hook" \
        /mnt/etc/pacman.d/hooks/
    elif [[ "${vendor}" =~ "Intel" ]]; then
      cp -f \
        "${DIR}/hooks/999-add-intel-ucode.hook" \
        "${DIR}/hooks/999-update-intel-ucode.hook" \
        "${DIR}/hooks/999-remove-intel-ucode.hook" \
        /mnt/etc/pacman.d/hooks/
    fi
    cp -f "${DIR}/utils/sdboot-mkconfig" /mnt/usr/local/sbin/
    chmod +x /mnt/usr/local/sbin/sdboot-mkconfig

    SCHEME="${SCHEME}" DEVICE="${DEVICE}" \
      arch-chroot /mnt /bin/bash -c "install_gummiboot"
  elif [[ "${BOOTMODE}" = "EFISTUB" ]]; then
    show_warning "Not supported yet..."
  fi
  unmount_install
  show_success "Done! Reboot now."
}

#
# Check if dependencies are installed and if network is working
#

check_root
check_network
sync_repos
install_dependencies

#
# GO!!!
#

main
